###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/May/2017  16:29:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\application\user_app1.c
#    Command line =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\application\user_app1.c
#        -D MPGL1 -D MPG1 -D EIE1 --preprocess=cl
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -lC
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\
#        -o
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\ -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\bsp\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\drivers\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline --require_prototypes -I "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\List\user_app1.lst
#    Object file  =  
#        D:\Documents\GitHub\5-5eie\5_course\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app1.o
#
###############################################################################

D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\application\user_app1.c
      1          /**********************************************************************************************************************
      2          File: user_app1.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app1 as a template:
      6           1. Copy both user_app1.c and user_app1.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app1" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp1" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP1" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app1.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserApp1Initialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserApp1RunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_UserApp1"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserApp1Flags;                       /* Global state flags */
   \                     G_u32UserApp1Flags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp1_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp1_StateMachine;            /* The state machine function pointer */
   \                     UserApp1_StateMachine:
   \   00000000                      DS8 4
     61          //static u32 UserApp1_u32Timeout;                      /* Timeout counter used across states */
     62          
     63          
     64          /**********************************************************************************************************************
     65          Function Definitions
     66          **********************************************************************************************************************/
     67          
     68          /*--------------------------------------------------------------------------------------------------------------------*/
     69          /* Public functions                                                                                                   */
     70          /*--------------------------------------------------------------------------------------------------------------------*/
     71          
     72          /*--------------------------------------------------------------------------------------------------------------------*/
     73          /* Protected functions                                                                                                */
     74          /*--------------------------------------------------------------------------------------------------------------------*/
     75          
     76          /*--------------------------------------------------------------------------------------------------------------------
     77          Function: UserApp1Initialize
     78          
     79          Description:
     80          Initializes the State Machine and its variables.
     81          
     82          Requires:
     83            -
     84          
     85          Promises:
     86            - 
     87          */

   \                                 In section .text, align 2, keep-with-next
     88          void UserApp1Initialize(void)
     89          {
   \                     UserApp1Initialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     90          	LedOff(BLUE);
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       LedOff
     91          	LedOff(YELLOW);
   \   00000008   0x2005             MOVS     R0,#+5
   \   0000000A   0x.... 0x....      BL       LedOff
     92          	LedOff(RED);
   \   0000000E   0x2007             MOVS     R0,#+7
   \   00000010   0x.... 0x....      BL       LedOff
     93          	LedOff(PURPLE);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       LedOff
     94          /*
     95           LedOn(BLUE);
     96           LedToggle(PURPLE);
     97           LedPWM(RED,LED_PWM_10);
     98           LedBlink(YELLOW,LED_2HZ);
     99           */
    100            /* If good initialization, set state to Idle */
    101            if( 1 )
    102            {
    103             // UserApp1_StateMachine = UserApp1SM_Idle;
    104             UserApp1_StateMachine =   password_button;
   \   0000001A   0x.... 0x....      ADR.W    R0,password_button
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable7
   \   00000022   0x6008             STR      R0,[R1, #+0]
    105               //UserApp1_StateMachine =BCD_code_display;
    106            }
    107            else
    108            {
    109              /* The task isn't properly initialized, so shut it down and don't run */
    110              UserApp1_StateMachine = UserApp1SM_FailedInit;
    111            }
    112          
    113          } /* end UserApp1Initialize() */
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
    114          
    115            
    116          /*----------------------------------------------------------------------------------------------------------------------
    117          Function UserApp1RunActiveState()
    118          
    119          Description:
    120          Selects and runs one iteration of the current state in the state machine.
    121          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    122          may take 1ms / n to execute.
    123          
    124          Requires:
    125            - State machine function pointer points at current state
    126          
    127          Promises:
    128            - Calls the function to pointed by the state machine function pointer
    129          */

   \                                 In section .text, align 2, keep-with-next
    130          void UserApp1RunActiveState(void)
    131          {
   \                     UserApp1RunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    132            UserApp1_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable7
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    133          
    134          } /* end UserApp1RunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    135          //

   \                                 In section .text, align 4, keep-with-next
    136          void password_button(void)
    137          {  
   \                     password_button: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    138               static u8 u8_password[4]={0,2,3,1};
    139          	 static u8 u8_input_button[4]={0};
    140          	 static  u8 u8_counter_buttton_press=0;
    141          	 static  BOOL B_Pass_No[3]= FALSE;
                 	                            ^
Warning[Pe520]: initialization with "{...}" expected for aggregate object
    142          	 u8 u8_temp_number     =0;
   \   00000002   0x2400             MOVS     R4,#+0
    143          	 if(u8_counter_buttton_press<=3)//you can input the password
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2804             CMP      R0,#+4
   \   0000000C   0xDA59             BGE.N    ??password_button_0
    144          		 	{
    145          		 	B_Pass_No[0] = FALSE;//initation the logic parameter
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable7_2
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    146          		 	
    147          		 if(WasButtonPressed(BUTTON0))
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       WasButtonPressed
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD013             BEQ.N    ??password_button_1
    148          		 	{
    149          		 	  u8_input_button[u8_counter_buttton_press]=0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000026   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   0000002A   0x7812             LDRB     R2,[R2, #+0]
   \   0000002C   0x5450             STRB     R0,[R2, R1]
    150          			  LedOn(WHITE);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x.... 0x....      BL       LedOn
    151          		 	  
    152          		 	  ButtonAcknowledge(BUTTON0);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      BL       ButtonAcknowledge
    153          			  u8_counter_buttton_press++;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x1C40             ADDS     R0,R0,#+1
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000046   0x7008             STRB     R0,[R1, #+0]
    154          		 	}
    155          
    156          		 if(WasButtonPressed(BUTTON1))
   \                     ??password_button_1: (+1)
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       WasButtonPressed
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD010             BEQ.N    ??password_button_2
    157          		 	{
    158          		 	 u8_input_button[u8_counter_buttton_press]=1;
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   0000005C   0x7812             LDRB     R2,[R2, #+0]
   \   0000005E   0x5450             STRB     R0,[R2, R1]
    159          			 ButtonAcknowledge(BUTTON1);
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x.... 0x....      BL       ButtonAcknowledge
    160          			 u8_counter_buttton_press++;
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   0000006A   0x7800             LDRB     R0,[R0, #+0]
   \   0000006C   0x1C40             ADDS     R0,R0,#+1
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable7_1
   \   00000072   0x7008             STRB     R0,[R1, #+0]
    161          		 	}
    162          		 if(WasButtonPressed(BUTTON2))
   \                     ??password_button_2: (+1)
   \   00000074   0x2002             MOVS     R0,#+2
   \   00000076   0x.... 0x....      BL       WasButtonPressed
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD00F             BEQ.N    ??password_button_3
    163          		 	{
    164          		 	u8_input_button[u8_counter_buttton_press]=2;
   \   0000007E   0x2002             MOVS     R0,#+2
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable7_3
   \   00000084   0x.... 0x....      LDR.W    R2,??DataTable7_1
   \   00000088   0x7812             LDRB     R2,[R2, #+0]
   \   0000008A   0x5450             STRB     R0,[R2, R1]
    165          			ButtonAcknowledge(BUTTON2);
   \   0000008C   0x2002             MOVS     R0,#+2
   \   0000008E   0x.... 0x....      BL       ButtonAcknowledge
    166          			u8_counter_buttton_press++;
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable7_1
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x1C40             ADDS     R0,R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable7_1
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    167          		 	}
    168          		 if(WasButtonPressed(BUTTON3))
   \                     ??password_button_3: (+1)
   \   0000009E   0x2003             MOVS     R0,#+3
   \   000000A0   0x.... 0x....      BL       WasButtonPressed
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD00C             BEQ.N    ??password_button_0
    169          		 	{
    170          		 	  u8_input_button[u8_counter_buttton_press]=3;
   \   000000A8   0x2003             MOVS     R0,#+3
   \   000000AA   0x....             LDR.N    R1,??DataTable7_3
   \   000000AC   0x....             LDR.N    R2,??DataTable7_1
   \   000000AE   0x7812             LDRB     R2,[R2, #+0]
   \   000000B0   0x5450             STRB     R0,[R2, R1]
    171          			  	ButtonAcknowledge(BUTTON3);
   \   000000B2   0x2003             MOVS     R0,#+3
   \   000000B4   0x.... 0x....      BL       ButtonAcknowledge
    172          			  u8_counter_buttton_press++;
   \   000000B8   0x....             LDR.N    R0,??DataTable7_1
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0x....             LDR.N    R1,??DataTable7_1
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
    173          		 	}
    174          	 	}
    175          	 if(u8_counter_buttton_press==4)//stop input password
   \                     ??password_button_0: (+1)
   \   000000C2   0x....             LDR.N    R0,??DataTable7_1
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0x2804             CMP      R0,#+4
   \   000000C8   0xD102             BNE.N    ??password_button_4
    176          	 	LedOn(RED);
   \   000000CA   0x2007             MOVS     R0,#+7
   \   000000CC   0x.... 0x....      BL       LedOn
    177          	// for(u8_temp_number=0;u8_temp_number<=3;u8_temp_number++)
    178          	 	//{
    179          	 	do{
    180          	 	  if(u8_password[u8_temp_number]==u8_input_button[u8_temp_number])
   \                     ??password_button_4: (+1)
   \   000000D0   0x....             LDR.N    R0,??DataTable7_4
   \   000000D2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D4   0x5C20             LDRB     R0,[R4, R0]
   \   000000D6   0x....             LDR.N    R1,??DataTable7_3
   \   000000D8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000DA   0x5C61             LDRB     R1,[R4, R1]
   \   000000DC   0x4288             CMP      R0,R1
   \   000000DE   0xD107             BNE.N    ??password_button_5
    181          		  	{u8_temp_number++;
   \   000000E0   0x1C64             ADDS     R4,R4,#+1
    182          		     B_Pass_No[0]= TRUE;
   \   000000E2   0x2001             MOVS     R0,#+1
   \   000000E4   0x....             LDR.N    R1,??DataTable7_2
   \   000000E6   0x7008             STRB     R0,[R1, #+0]
    183          	 	  	}
    184          		  else
    185          		  	{
    186          		  	  B_Pass_No[0]=FALSE;
    187          			  break;
    188          		  	}
    189          		  	
    190          	      } 	
    191          		 while(u8_temp_number<=3);//}
   \   000000E8   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EA   0x2C04             CMP      R4,#+4
   \   000000EC   0xDBF0             BLT.N    ??password_button_4
   \   000000EE   0xE002             B.N      ??password_button_6
   \                     ??password_button_5: (+1)
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x....             LDR.N    R1,??DataTable7_2
   \   000000F4   0x7008             STRB     R0,[R1, #+0]
    192             if(B_Pass_No[0]==TRUE)
   \                     ??password_button_6: (+1)
   \   000000F6   0x....             LDR.N    R0,??DataTable7_2
   \   000000F8   0x7800             LDRB     R0,[R0, #+0]
   \   000000FA   0x2801             CMP      R0,#+1
   \   000000FC   0xD10F             BNE.N    ??password_button_7
    193             	{
    194             	    if(G_u32SystemTime1ms%1000==0)
   \   000000FE   0x....             LDR.N    R0,??DataTable7_5
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0xF44F 0x717A      MOV      R1,#+1000
   \   00000106   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000010A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xD102             BNE.N    ??password_button_8
    195          			LedToggle(BLUE);
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0x.... 0x....      BL       LedToggle
    196          		u8_counter_buttton_press=0;// start new input 
   \                     ??password_button_8: (+1)
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0x....             LDR.N    R1,??DataTable7_1
   \   0000011C   0x7008             STRB     R0,[R1, #+0]
    197             	}
    198          	 
    199          }
   \                     ??password_button_7: (+1)
   \   0000011E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??u8_password:
   \   00000000   0x00 0x02          DC8 0, 2, 3, 1
   \              0x03 0x01    

   \                                 In section .bss, align 4
   \                     ??u8_input_button:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     ??u8_counter_buttton_press:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     ??B_Pass_No:
   \   00000000                      DS8 4
    200          //

   \                                 In section .text, align 2, keep-with-next
    201          void button_pressed(void)
    202          { 
   \                     button_pressed: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    203            static bool B_ispressed[3] = FALSE;
                                                ^
Warning[Pe520]: initialization with "{...}" expected for aggregate object
    204           if(  IsButtonPressed(BUTTON0)==TRUE)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       IsButtonPressed
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD110             BNE.N    ??button_pressed_0
    205           	{
    206           	  if(B_ispressed[0]==FALSE)
   \   0000000C   0x....             LDR.N    R0,??DataTable7_6
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD106             BNE.N    ??button_pressed_1
    207           	  	{
    208           	  	   LedOn(RED);
   \   00000014   0x2007             MOVS     R0,#+7
   \   00000016   0x.... 0x....      BL       LedOn
    209           	  	  B_ispressed[0] =TRUE;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x....             LDR.N    R1,??DataTable7_6
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \   00000020   0xE005             B.N      ??button_pressed_0
    210           	  	}
    211          	  else
    212          	  	{
    213          	  	B_ispressed[0]=FALSE;
   \                     ??button_pressed_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable7_6
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    214          		LedOff(RED);
   \   00000028   0x2007             MOVS     R0,#+7
   \   0000002A   0x.... 0x....      BL       LedOff
    215          	  	}
    216          	  
    217           	   //LedOn(RED);
    218           	}
    219          
    220           if(WasButtonPressed(BUTTON1))
   \                     ??button_pressed_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       WasButtonPressed
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD013             BEQ.N    ??button_pressed_2
    221           	{
    222           	    if(B_ispressed[1]==FALSE)
   \   00000038   0x....             LDR.N    R0,??DataTable7_6
   \   0000003A   0x7840             LDRB     R0,[R0, #+1]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD106             BNE.N    ??button_pressed_3
    223           	    	{
    224           	    	B_ispressed[1]= TRUE;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x....             LDR.N    R1,??DataTable7_6
   \   00000044   0x7048             STRB     R0,[R1, #+1]
    225          			LedOn(BLUE);
   \   00000046   0x2002             MOVS     R0,#+2
   \   00000048   0x.... 0x....      BL       LedOn
   \   0000004C   0xE005             B.N      ??button_pressed_4
    226           	    	}
    227          		else
    228          			{
    229          			B_ispressed[1]=FALSE;
   \                     ??button_pressed_3: (+1)
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x....             LDR.N    R1,??DataTable7_6
   \   00000052   0x7048             STRB     R0,[R1, #+1]
    230          			LedOff(BLUE);
   \   00000054   0x2002             MOVS     R0,#+2
   \   00000056   0x.... 0x....      BL       LedOff
    231          			}
    232          		ButtonAcknowledge(BUTTON1);
   \                     ??button_pressed_4: (+1)
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0x.... 0x....      BL       ButtonAcknowledge
    233           	}
    234              
    235          }
   \                     ??button_pressed_2: (+1)
   \   00000060   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 4
   \                     ??B_ispressed:
   \   00000000                      DS8 4
    236          //pwm toggle test

   \                                 In section .text, align 2, keep-with-next
    237          void Led_API_test(void)
    238          	{bool B_button_pressed[4]= FALSE;
                 	                           ^
Warning[Pe520]: initialization with "{...}" expected for aggregate object
   \                     Led_API_test: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
    239          	
    240               if(WasButtonPressed(BUTTON0))
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       WasButtonPressed
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD00D             BEQ.N    ??Led_API_test_0
    241               	{
    242               	  if(B_button_pressed[0]==FALSE)
   \   00000012   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD103             BNE.N    ??Led_API_test_1
    243          		  	B_button_pressed[0]= TRUE;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000020   0xE002             B.N      ??Led_API_test_2
    244          		  else
    245          		  	B_button_pressed[0] = FALSE;
   \                     ??Led_API_test_1: (+1)
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x0000      STRB     R0,[SP, #+0]
    246               	 ButtonAcknowledge(BUTTON0);
   \                     ??Led_API_test_2: (+1)
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       ButtonAcknowledge
    247               	}
    248          	 if(WasButtonPressed(BUTTON1))
   \                     ??Led_API_test_0: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0x.... 0x....      BL       WasButtonPressed
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD00D             BEQ.N    ??Led_API_test_3
    249          	 	{
    250          	 	if(B_button_pressed[1]==FALSE)
   \   00000038   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD103             BNE.N    ??Led_API_test_4
    251          			B_button_pressed[1]=TRUE;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000046   0xE002             B.N      ??Led_API_test_5
    252          		else
    253          			B_button_pressed[1]=FALSE;
   \                     ??Led_API_test_4: (+1)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF88D 0x0001      STRB     R0,[SP, #+1]
    254          	 	 ButtonAcknowledge(BUTTON1);
   \                     ??Led_API_test_5: (+1)
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0x.... 0x....      BL       ButtonAcknowledge
    255          		 
    256          	 	}
    257          	 if(B_button_pressed[0]==TRUE)
   \                     ??Led_API_test_3: (+1)
   \   00000054   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD10C             BNE.N    ??Led_API_test_6
    258          	 	{
    259          	 	if(G_u32SystemTime1ms%1000==0)
   \   0000005C   0x....             LDR.N    R0,??DataTable7_5
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF44F 0x717A      MOV      R1,#+1000
   \   00000064   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000068   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000006C   0x2800             CMP      R0,#+0
   \   0000006E   0xD102             BNE.N    ??Led_API_test_6
    260          	 	LedToggle(RED);
   \   00000070   0x2007             MOVS     R0,#+7
   \   00000072   0x.... 0x....      BL       LedToggle
    261          	 	}
    262          	 if(B_button_pressed[1]==TRUE)
    263          	 	{
    264          	 	//LedPWM(LedNumberType eLED_,LedRateType ePwmRate_)
    265          	 	}
    266          	}
   \                     ??Led_API_test_6: (+1)
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
    267          
    268          /*--------------------------------------------------------------------------------------------------------------------*/
    269          /* Private functions                                                                                                  */
    270          /*--------------------------------------------------------------------------------------------------------------------*/
    271          //test 2017-5-6

   \                                 In section .text, align 2, keep-with-next
    272          void BCD_code_display(void)
    273          {
   \                     BCD_code_display: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    274            static u16 u16_counter = 0;//this varible for counter the 1S
    275            static u8 a_u8_binary[8] =0;//to determine what light on
                                             ^
Warning[Pe520]: initialization with "{...}" expected for aggregate object
    276            u8 u8_temp_counter =0;//for tempoary save 
   \   00000002   0x2400             MOVS     R4,#+0
    277            static u8 u8_temp_counter_on=0;//for change the the decema 
    278            if(G_u32SystemTime1ms%1000==0)
   \   00000004   0x....             LDR.N    R0,??DataTable7_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000010   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD10B             BNE.N    ??BCD_code_display_0
    279            {
    280               u16_counter++;
   \   00000018   0x....             LDR.N    R0,??DataTable7_7
   \   0000001A   0x8800             LDRH     R0,[R0, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x....             LDR.N    R1,??DataTable7_7
   \   00000020   0x8008             STRH     R0,[R1, #+0]
    281          	 if(u16_counter>=99)
   \   00000022   0x....             LDR.N    R0,??DataTable7_7
   \   00000024   0x8800             LDRH     R0,[R0, #+0]
   \   00000026   0x2863             CMP      R0,#+99
   \   00000028   0xDB02             BLT.N    ??BCD_code_display_0
    282          	 	u16_counter=0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR.N    R1,??DataTable7_7
   \   0000002E   0x8008             STRH     R0,[R1, #+0]
    283            }
    284            ///decade 
    285            u8_temp_counter_on=u16_counter/10;
   \                     ??BCD_code_display_0: (+1)
   \   00000030   0x....             LDR.N    R0,??DataTable7_7
   \   00000032   0x8800             LDRH     R0,[R0, #+0]
   \   00000034   0x210A             MOVS     R1,#+10
   \   00000036   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000003A   0x....             LDR.N    R1,??DataTable7_8
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    286            for(u8_temp_counter=4;u8_temp_counter<=7;u8_temp_counter++)
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x0004             MOVS     R4,R0
   \                     ??BCD_code_display_1: (+1)
   \   00000042   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000044   0x2C08             CMP      R4,#+8
   \   00000046   0xDA12             BGE.N    ??BCD_code_display_2
    287            	{
    288               a_u8_binary[u8_temp_counter] = u8_temp_counter_on%2;
   \   00000048   0x....             LDR.N    R0,??DataTable7_8
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000052   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000056   0x....             LDR.N    R0,??DataTable7_9
   \   00000058   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005A   0x5422             STRB     R2,[R4, R0]
    289          	 u8_temp_counter_on=u8_temp_counter_on/2;
   \   0000005C   0x....             LDR.N    R0,??DataTable7_8
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2102             MOVS     R1,#+2
   \   00000062   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000066   0x....             LDR.N    R1,??DataTable7_8
   \   00000068   0x7008             STRB     R0,[R1, #+0]
    290            	}
   \   0000006A   0x1C64             ADDS     R4,R4,#+1
   \   0000006C   0xE7E9             B.N      ??BCD_code_display_1
    291            ///signal 
    292            u8_temp_counter_on=u16_counter%10;
   \                     ??BCD_code_display_2: (+1)
   \   0000006E   0x....             LDR.N    R0,??DataTable7_7
   \   00000070   0x8800             LDRH     R0,[R0, #+0]
   \   00000072   0x210A             MOVS     R1,#+10
   \   00000074   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000078   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000007C   0x....             LDR.N    R1,??DataTable7_8
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    293            	for(u8_temp_counter=0;u8_temp_counter<=3;u8_temp_counter++)
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x0004             MOVS     R4,R0
   \                     ??BCD_code_display_3: (+1)
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0x2C04             CMP      R4,#+4
   \   00000088   0xDA12             BGE.N    ??BCD_code_display_4
    294            		{a_u8_binary[u8_temp_counter]=u8_temp_counter_on%2;
   \   0000008A   0x....             LDR.N    R0,??DataTable7_8
   \   0000008C   0x7800             LDRB     R0,[R0, #+0]
   \   0000008E   0x2102             MOVS     R1,#+2
   \   00000090   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000094   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000098   0x....             LDR.N    R0,??DataTable7_9
   \   0000009A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009C   0x5422             STRB     R2,[R4, R0]
    295          	     u8_temp_counter_on=u8_temp_counter_on/2;
   \   0000009E   0x....             LDR.N    R0,??DataTable7_8
   \   000000A0   0x7800             LDRB     R0,[R0, #+0]
   \   000000A2   0x2102             MOVS     R1,#+2
   \   000000A4   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000A8   0x....             LDR.N    R1,??DataTable7_8
   \   000000AA   0x7008             STRB     R0,[R1, #+0]
    296            		}
   \   000000AC   0x1C64             ADDS     R4,R4,#+1
   \   000000AE   0xE7E9             B.N      ??BCD_code_display_3
    297          	for(u8_temp_counter=0;u8_temp_counter<=7;u8_temp_counter++)
   \                     ??BCD_code_display_4: (+1)
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x0004             MOVS     R4,R0
   \                     ??BCD_code_display_5: (+1)
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0x2C08             CMP      R4,#+8
   \   000000B8   0xDA0F             BGE.N    ??BCD_code_display_6
    298          		{
    299          		 if(a_u8_binary[u8_temp_counter]==1)
   \   000000BA   0x....             LDR.N    R0,??DataTable7_9
   \   000000BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BE   0x5C20             LDRB     R0,[R4, R0]
   \   000000C0   0x2801             CMP      R0,#+1
   \   000000C2   0xD104             BNE.N    ??BCD_code_display_7
    300          		 	LedOn(u8_temp_counter);
                 		 	      ^
Warning[Pe188]: enumerated type mixed with another type
   \   000000C4   0x0020             MOVS     R0,R4
   \   000000C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C8   0x.... 0x....      BL       LedOn
   \   000000CC   0xE003             B.N      ??BCD_code_display_8
    301          		 else
    302          		 	LedOff(u8_temp_counter);
                 		 	       ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??BCD_code_display_7: (+1)
   \   000000CE   0x0020             MOVS     R0,R4
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x.... 0x....      BL       LedOff
    303          		}
   \                     ??BCD_code_display_8: (+1)
   \   000000D6   0x1C64             ADDS     R4,R4,#+1
   \   000000D8   0xE7EC             B.N      ??BCD_code_display_5
    304          
    305          	
    306            
    307          }
   \                     ??BCD_code_display_6: (+1)
   \   000000DA   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .bss, align 2
   \                     ??u16_counter:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
   \                     ??a_u8_binary:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
   \                     ??u8_temp_counter_on:
   \   00000000                      DS8 1
    308          
    309          /**********************************************************************************************************************
    310          State Machine Function Definitions
    311          **********************************************************************************************************************/
    312          
    313          //

   \                                 In section .text, align 2, keep-with-next
    314          void double_led(void)
    315          {
   \                     double_led: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    316            u8 u8_counter = 0;
   \   00000002   0x2400             MOVS     R4,#+0
    317            if(G_u32SystemTime1ms%500==0)
   \   00000004   0x....             LDR.N    R0,??DataTable7_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF44F 0x71FA      MOV      R1,#+500
   \   0000000C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000010   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD10A             BNE.N    ??double_led_0
    318              for(u8_counter=0;u8_counter<=4;u8_counter++)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0004             MOVS     R4,R0
   \                     ??double_led_1: (+1)
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C05             CMP      R4,#+5
   \   00000020   0xDA05             BGE.N    ??double_led_0
    319              {
    320                LedOn(u8_counter+2);
                             ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000022   0x1CA0             ADDS     R0,R4,#+2
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LedOn
    321              }
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \   0000002C   0xE7F6             B.N      ??double_led_1
    322            if(G_u32SystemTime1ms%2000==0)
   \                     ??double_led_0: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable7_5
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF44F 0x61FA      MOV      R1,#+2000
   \   00000036   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000003A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD10A             BNE.N    ??double_led_2
    323            {
    324               for(u8_counter=0;u8_counter<=7;u8_counter++)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x0004             MOVS     R4,R0
   \                     ??double_led_3: (+1)
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C08             CMP      R4,#+8
   \   0000004A   0xDA05             BGE.N    ??double_led_2
    325                 LedOff(u8_counter);
                               ^
Warning[Pe188]: enumerated type mixed with another type
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       LedOff
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \   00000056   0xE7F6             B.N      ??double_led_3
    326            }
    327            if(G_u32SystemTime1ms%10000==0)
   \                     ??double_led_2: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable7_5
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF242 0x7110      MOVW     R1,#+10000
   \   00000060   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000064   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD103             BNE.N    ??double_led_4
    328                UserApp1_StateMachine = all_led;
   \   0000006C   0x.... 0x....      ADR.W    R0,all_led
   \   00000070   0x....             LDR.N    R1,??DataTable7
   \   00000072   0x6008             STR      R0,[R1, #+0]
    329              
    330              
    331          }
   \                     ??double_led_4: (+1)
   \   00000074   0xBD10             POP      {R4,PC}          ;; return
    332          
    333          //all led light.

   \                                 In section .text, align 4, keep-with-next
    334          void all_led(void)
    335          {u8 u8_counter=0;
   \                     all_led: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x2400             MOVS     R4,#+0
    336              if(G_u32SystemTime1ms%1000==0)
   \   00000004   0x....             LDR.N    R0,??DataTable7_5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF44F 0x717A      MOV      R1,#+1000
   \   0000000C   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000010   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD10A             BNE.N    ??all_led_0
    337              {
    338               for(u8_counter=0;u8_counter<=7;u8_counter++)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0004             MOVS     R4,R0
   \                     ??all_led_1: (+1)
   \   0000001C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   0x2C08             CMP      R4,#+8
   \   00000020   0xDA05             BGE.N    ??all_led_0
    339               {
    340                 LedOn(u8_counter);
                              ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000022   0x0020             MOVS     R0,R4
   \   00000024   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000026   0x.... 0x....      BL       LedOn
    341                //LedOn(RED);
    342               }
   \   0000002A   0x1C64             ADDS     R4,R4,#+1
   \   0000002C   0xE7F6             B.N      ??all_led_1
    343              }
    344              if(G_u32SystemTime1ms%2000==0)
   \                     ??all_led_0: (+1)
   \   0000002E   0x....             LDR.N    R0,??DataTable7_5
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0xF44F 0x61FA      MOV      R1,#+2000
   \   00000036   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   0000003A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD10A             BNE.N    ??all_led_2
    345              {
    346                for(u8_counter=0;u8_counter<=7;u8_counter++)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x0004             MOVS     R4,R0
   \                     ??all_led_3: (+1)
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C08             CMP      R4,#+8
   \   0000004A   0xDA05             BGE.N    ??all_led_2
    347                {
    348                  LedOff(u8_counter);
                                ^
Warning[Pe188]: enumerated type mixed with another type
   \   0000004C   0x0020             MOVS     R0,R4
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x.... 0x....      BL       LedOff
    349                }
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \   00000056   0xE7F6             B.N      ??all_led_3
    350              }
    351              if(G_u32SystemTime1ms%10000==0)//10
   \                     ??all_led_2: (+1)
   \   00000058   0x....             LDR.N    R0,??DataTable7_5
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0xF242 0x7110      MOVW     R1,#+10000
   \   00000060   0xFBB0 0xF2F1      UDIV     R2,R0,R1
   \   00000064   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD102             BNE.N    ??all_led_4
    352                UserApp1_StateMachine = double_led;
   \   0000006C   0x....             LDR.N    R0,??DataTable7_10
   \   0000006E   0x....             LDR.N    R1,??DataTable7
   \   00000070   0x6008             STR      R0,[R1, #+0]
    353             
    354              
    355                
    356          }
   \                     ??all_led_4: (+1)
   \   00000072   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     UserApp1_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     ??u8_counter_buttton_press

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     ??B_Pass_No

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ??u8_input_button

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ??u8_password

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     G_u32SystemTime1ms

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     ??B_ispressed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     ??u16_counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x........         DC32     ??u8_temp_counter_on

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x........         DC32     ??a_u8_binary

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     double_led

   \                                 In section .rodata, align 4
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    357          ///
    358          /*-------------------------------------------------------------------------------------------------------------------*/
    359          /* Wait for ??? */
    360          static void UserApp1SM_Idle(void)
    361          {
    362          static u8 u8_pwm_red = 0;
    363           if(G_u32SystemTime1ms%1000==0)//blink purple
    364           	{
    365           	LedToggle(PURPLE);
    366          	u8_pwm_red++;
    367          	if(u8_pwm_red>=20)
    368          		u8_pwm_red=0;
    369          
    370          	LedPWM(RED,u8_pwm_red);
                 	           ^
Warning[Pe188]: enumerated type mixed with another type

  static void UserApp1SM_Idle(void)
              ^
"D:\Documents\GitHub\5-5eie\5_course\firmware_mpg_common\application\user_app1.c",360  Warning[Pe177]: 
          function "UserApp1SM_Idle" was declared but never referenced
    371           	}
    372           
    373           
    374          } /* end UserApp1SM_Idle() */
    375              
    376          #if 0
    377          /*-------------------------------------------------------------------------------------------------------------------*/
    378          /* Handle an error */
    379          static void UserApp1SM_Error(void)          
    380          {
    381            
    382          } /* end UserApp1SM_Error() */
    383          #endif
    384          
    385          
    386          /*-------------------------------------------------------------------------------------------------------------------*/
    387          /* State to sit in if init failed */
    388          static void UserApp1SM_FailedInit(void)          
    389          {
    390              
    391          } /* end UserApp1SM_FailedInit() */
    392          
    393          
    394          /*--------------------------------------------------------------------------------------------------------------------*/
    395          /* End of File                                                                                                        */
    396          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   BCD_code_display
         8   -> LedOff
         8   -> LedOn
       8   Led_API_test
         8   -> ButtonAcknowledge
         8   -> LedToggle
         8   -> WasButtonPressed
       8   UserApp1Initialize
         8   -> LedOff
       8   UserApp1RunActiveState
         8   -- Indirect call
       8   all_led
         8   -> LedOff
         8   -> LedOn
       8   button_pressed
         8   -> ButtonAcknowledge
         8   -> IsButtonPressed
         8   -> LedOff
         8   -> LedOn
         8   -> WasButtonPressed
       8   double_led
         8   -> LedOff
         8   -> LedOn
       8   password_button
         8   -> ButtonAcknowledge
         8   -> LedOn
         8   -> LedToggle
         8   -> WasButtonPressed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       4  ?_0
     220  BCD_code_display
       4  B_Pass_No
       4  B_ispressed
       4  G_u32UserApp1Flags
     120  Led_API_test
      38  UserApp1Initialize
      12  UserApp1RunActiveState
       4  UserApp1_StateMachine
       8  a_u8_binary
     116  all_led
      98  button_pressed
     118  double_led
     288  password_button
       2  u16_counter
       1  u8_counter_buttton_press
       4  u8_input_button
       4  u8_password
       1  u8_temp_counter_on

 
    32 bytes in section .bss
     4 bytes in section .data
     4 bytes in section .rodata
 1 054 bytes in section .text
 
 1 054 bytes of CODE  memory
     4 bytes of CONST memory
    36 bytes of DATA  memory

Errors: none
Warnings: 12
